/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LogicInterface extends Interface {
  getFunction(
    nameOrSignature: "cartesiCallback" | "execute" | "value"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ItWorks"): EventFragment;

  encodeFunctionData(
    functionFragment: "cartesiCallback",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "execute", values?: undefined): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "cartesiCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
}

export namespace ItWorksEvent {
  export type InputTuple = [message: string];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Logic extends BaseContract {
  connect(runner?: ContractRunner | null): Logic;
  waitForDeployment(): Promise<this>;

  interface: LogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cartesiCallback: TypedContractMethod<[result: string], [void], "nonpayable">;

  execute: TypedContractMethod<[], [void], "nonpayable">;

  value: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cartesiCallback"
  ): TypedContractMethod<[result: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "value"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ItWorks"
  ): TypedContractEvent<
    ItWorksEvent.InputTuple,
    ItWorksEvent.OutputTuple,
    ItWorksEvent.OutputObject
  >;

  filters: {
    "ItWorks(string)": TypedContractEvent<
      ItWorksEvent.InputTuple,
      ItWorksEvent.OutputTuple,
      ItWorksEvent.OutputObject
    >;
    ItWorks: TypedContractEvent<
      ItWorksEvent.InputTuple,
      ItWorksEvent.OutputTuple,
      ItWorksEvent.OutputObject
    >;
  };
}
