/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IInputInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addInput"
      | "getCurrentInbox"
      | "getInput"
      | "getNumberOfInputs"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "InputAdded"): EventFragment;

  encodeFunctionData(functionFragment: "addInput", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getCurrentInbox",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInput",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfInputs",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentInbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfInputs",
    data: BytesLike
  ): Result;
}

export namespace InputAddedEvent {
  export type InputTuple = [
    epochNumber: BigNumberish,
    inputIndex: BigNumberish,
    sender: AddressLike,
    timestamp: BigNumberish,
    input: BytesLike
  ];
  export type OutputTuple = [
    epochNumber: bigint,
    inputIndex: bigint,
    sender: string,
    timestamp: bigint,
    input: string
  ];
  export interface OutputObject {
    epochNumber: bigint;
    inputIndex: bigint;
    sender: string;
    timestamp: bigint;
    input: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IInput extends BaseContract {
  connect(runner?: ContractRunner | null): IInput;
  waitForDeployment(): Promise<this>;

  interface: IInputInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addInput: TypedContractMethod<[_input: BytesLike], [string], "nonpayable">;

  getCurrentInbox: TypedContractMethod<[], [bigint], "view">;

  getInput: TypedContractMethod<[_index: BigNumberish], [string], "view">;

  getNumberOfInputs: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addInput"
  ): TypedContractMethod<[_input: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentInbox"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInput"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getNumberOfInputs"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "InputAdded"
  ): TypedContractEvent<
    InputAddedEvent.InputTuple,
    InputAddedEvent.OutputTuple,
    InputAddedEvent.OutputObject
  >;

  filters: {
    "InputAdded(uint256,uint256,address,uint256,bytes)": TypedContractEvent<
      InputAddedEvent.InputTuple,
      InputAddedEvent.OutputTuple,
      InputAddedEvent.OutputObject
    >;
    InputAdded: TypedContractEvent<
      InputAddedEvent.InputTuple,
      InputAddedEvent.OutputTuple,
      InputAddedEvent.OutputObject
    >;
  };
}
